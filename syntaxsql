account
CREATE TABLE account (
    id SERIAL PRIMARY KEY, -- Auto increment ID untuk setiap akun
    nama VARCHAR(255) NOT NULL, -- Nama lengkap
    email VARCHAR(255) UNIQUE NOT NULL, -- Email harus unik
    gender CHAR(1) NOT NULL CHECK (gender IN ('f', 'm')), -- Gender (f untuk female, m untuk male)
    password VARCHAR(255) NOT NULL, -- Password yang di-hash
    role INT NOT NULL DEFAULT 1, -- Default role = 1
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Timestamp pembuatan akun
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- Timestamp terakhir diperbarui
);

room conseling
CREATE TABLE account_conseling (
  id SERIAL PRIMARY KEY,
  name VARCHAR(255),
  email VARCHAR(255),
  role INT,
  session_type VARCHAR(20),
  code INT,
  room_number INT,
  expiration_date TIMESTAMP
);

table chat
CREATE TABLE account_chat (
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  role VARCHAR(50) NOT NULL,
  time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  room_number INTEGER NOT NULL,
  message TEXT NOT NULL
);

untuk mendapatkan password hasher
node password-hasher/hashPassword.js

untuk menginsert manual account admin
INSERT INTO account (nama, email, gender, password, role)
VALUES
('Admin Name', 'admin@gmail.com', 'm', '$2a$10$B16DyixFcllKYGn4MZ/iE.aj8fW3Ms/xd6KFnlRjHgVbdek2xszB6', 2);


untuk upload story tablenya
CREATE TABLE account_story (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL,
    story TEXT NOT NULL,
    photos TEXT[], -- Menggunakan array untuk menyimpan path foto
    upload_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

untuk comments
CREATE TABLE account_comments (
  id SERIAL PRIMARY KEY,
  nama VARCHAR(255) NOT NULL,
  role VARCHAR(50) NOT NULL,
  email VARCHAR(255) NOT NULL,
  text TEXT NOT NULL,
  account_story_id INT NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  CONSTRAINT fk_account_story FOREIGN KEY (account_story_id) REFERENCES account_story(id) ON DELETE CASCADE
);

